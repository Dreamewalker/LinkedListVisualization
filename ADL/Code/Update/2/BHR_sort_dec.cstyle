basePtr = root->next;
while (basePtr != null) {{
    // find min between [basePtr, rear]
    minPtr = basePtr;
    currentPtr = basePtr->next;
    while (currentPtr != null) {{
        if (minPtr->value > currentPtr->value) {{
            minPtr = currentPtr;
        }}
        currentPtr = currentPtr->next;
    }}
    //insert min node after root
    if (basePtr->prev == root) {{
        rear = minPtr;
    }}
    if (minPtr == basePtr) {{
        basePtr = basePtr->next;
    }}
    minPtr->prev->next = minPtr->next;
    if (minPtr->next != null) {{
        minPtr->next->prev = minPtr->prev;
    }}
    minPtr->next = root->next;
    root->next->prev = minPtr;
    root->next = minPtr;
    minPtr->prev = root;
}}
return SUCCESS;