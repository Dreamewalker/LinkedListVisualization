basePtr = root;
while (basePtr != null) {{
    // find max between [basePtr, rear]
    maxPtr = basePtr;
    currentPtr = basePtr->next;
    while (currentPtr != null) {{
        if (maxPtr->value < currentPtr->value) {{
            maxPtr = currentPtr;
        }}
        currentPtr = currentPtr->next;
    }}
    //insert max node after root
    if (maxPtr == basePtr) {{
        basePtr = basePtr->next;
    }}
    if (maxPtr->prev != null) {{
        maxPtr->prev->next = maxPtr->next;
        if (maxPtr->next != null) {{
            maxPtr->next->prev = maxPtr->prev;
        }}
        maxPtr->next = root;
        root->prev = maxPtr;
        root = maxPtr;
        maxPtr->prev = null;
    }}
}}
return SUCCESS;