basePtr = root;
basePrev = null;
while (basePtr != null) {{
    // find max between [basePtr, rear]
    maxPtr = basePtr;
    maxPrev = basePrev;
    currentPtr = basePtr->next;
    currentPrev = basePtr;
    while (currentPtr != null) {{
        if (maxPtr->value < currentPtr->value) {{
            maxPrev = currentPrev;
            maxPtr = currentPtr;
        }}
        currentPrev = currentPtr;
        currentPtr = currentPtr->next;
    }}
    //insert max node after root
    if (maxPtr == basePtr) {{
        basePtr = basePtr->next;
    }}
    if (basePrev == null) {{
        basePrev = maxPtr;
    }}
    if (maxPrev != null) {{
        maxPrev->next = maxPtr->next;
        maxPtr->next = root;
        root = maxPtr;
    }}
}}
return SUCCESS;